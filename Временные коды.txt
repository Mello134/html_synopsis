Пользователькие тегги
-в каталоге приложения создаём подкаталог templatestags
-в templatestags- python file - __init__.py
-в templatestags - video_tags.py

simple_tag <________________________________________

-в - video_tags.py:
register = template.Library()

-Далее пишем уже сам тег
@register.simple_tag()  (в скобках можно указать name='getcats') - для вызова в шаблоне
def get_caterories():
    return Category.objects.all()

@register.simple_tag()
def get_comments(self.video.pk)
   return Comment.objects.filter(com_video__pk = self.video.pk)



В шаблоне
{% load video_tags %} подгружаем файл с теггами

{% get_caterories%} вызываем тег
- этот тег вызовет Queryset <Category: Актрисы>.. 

Чтобы можно было перибирать записи из этого тега
{% get_caterories as catigories %}  # catigories - придумали сами
{% for cat in catigories %}  # перебираем все записи
    {{ cat.name }}  # вывдеем название категорий (обычный цикл)
{% endfor %}  
simple_tag >________________________________________

Включающий тег (Полностью HTML страницу, обывок страницы)

-в - video_tags.py:
register = template.Library()

@register.inclision_tag('blog/list_categories.html')  #отдельный шаблон
def show_categories():
   cats = Categories.objects.all()
   return {'cats':cats}

В шаблоне 'blog/list_categories.html' - пишем всё что нужно (просто цикл с перебором имён категорий) - даже не нужно подключатся к base.html

В шаблоне куда хотим вставить наш тег просто
{% show_categories %}  # добавит в это место весь blog/list_categories.html



jquery. ajax
1 - base.html - скрытпы js
2 - делать отдельную страницу html - форма, лайк и тд  - которая будет обновлятся rating_form.html (от <form> до </form>)
3 - в полной странице делаем car.html - делаем include - {% include 'blog/rating_form.html' %}




выподающий список, чекбокс или RadioSelect() радиобокс


https://html5book.ru/sozdanie-html-form/


def new_measurement(request):
    if request.method == "POST":
        form = MeasurementForm(request.POST)
        if form.is_valid():
            measurement = form.save(commit=False)
            measurement.measurement_date = timezone.now()
            measurement.save()
    else:
        form = MeasurementForm()

    qs = Measurement.objects.all()
    context = {'form': form, 'measurement_list': qs}
    return render(request, 'index.html', context)






https://programbox.ru/2022/12/04/%D0%BA%D0%B0%D0%BA-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BB%D0%B0%D0%B9%D0%BA%D0%B8-%D0%BA-%D0%BC%D0%BE%D0%B8%D0%BC-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F%D0%BC-%D0%B2/
avtoblog-project.blog.views.py


Можно через шаблон, использовать счетчик count.
{{post|count}}

>>> count = MyModel.objects.all().count()
>>> count
2




# домашняя страница
def show_home(request):
    cars = Car.objects.all().order_by('?')  # каждое обновление рандомный порядок

    paginator = Paginator(cars, 4)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'cat_selected': 'all',
        'all_categories': all_categories,
        'title': 'Все модели',
        # 'cars': cars,
    }
    return render(request, 'blog/home.html', context=context)






# вывод записей Car - по выбранной категории
def show_categories(request, cat_slug):  # в скобках то что получаем в запросе
    # cat__slug - обращение из модели Car - к полю slug модели Category
    # cat_slug - значение поля slug - выбранной категории - см get_abs_url Category
    cars = Car.objects.filter(cat__slug=cat_slug)
    category_1 = Category.objects.get(slug=cat_slug)

    paginator = Paginator(cars, 2)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'all_categories': all_categories,
        'cat_selected': cat_slug,
        'title': f'Производство: {category_1}',
        # 'cars': cars,
    }
    return render(request, 'blog/home.html', context=context)







